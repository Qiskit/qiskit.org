{
    "parents": [
        {
            "link": "../terra/",
            "title": "Qiskit Terra API Reference"
        }
    ],
    "prev": {
        "link": "../terra/",
        "title": "Qiskit Terra API Reference"
    },
    "next": {
        "link": "../../stubs/qiskit.circuit.QuantumCircuit/",
        "title": "QuantumCircuit"
    },
    "title": "Quantum Circuits (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit.circuit</span></code>)",
    "meta": null,
    "body": "<span class=\"target\" id=\"module-qiskit.circuit\"><span id=\"qiskit-circuit\"></span></span><section id=\"quantum-circuits-qiskit-circuit\">\n<h1>Quantum Circuits (<a class=\"reference internal\" href=\"#module-qiskit.circuit\" title=\"qiskit.circuit\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit.circuit</span></code></a>)<a class=\"headerlink\" href=\"#quantum-circuits-qiskit-circuit\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<section id=\"overview\">\n<h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>The fundamental element of quantum computing is the <strong>quantum circuit</strong>.\nA quantum circuit is a computational routine consisting of coherent quantum\noperations on quantum data, such as qubits. It is an ordered sequence of quantum\ngates, measurements and resets, which may be conditioned on real-time classical\ncomputation. A set of quantum gates is said to be universal if any unitary\ntransformation of the quantum data can be efficiently approximated arbitrarily well\nas as sequence of gates in the set. Any quantum program can be represented by a\nsequence of quantum circuits and classical near-time computation.</p>\n<p>In Qiskit, this core element is represented by the <a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.QuantumCircuit/#qiskit.circuit.QuantumCircuit\" title=\"qiskit.circuit.QuantumCircuit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuantumCircuit</span></code></a> class.\nBelow is an example of a quantum circuit that makes a three-qubit GHZ state\ndefined as:</p>\n<div class=\"math notranslate nohighlight\">\n\\[|\\psi\\rangle = \\left(|000\\rangle+|111\\rangle\\right)/\\sqrt{2}\\]</div>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">qiskit</span> <span class=\"kn\">import</span> <span class=\"n\">QuantumCircuit</span>\n<span class=\"c1\"># Create a circuit with a register of three qubits</span>\n<span class=\"n\">circ</span> <span class=\"o\">=</span> <span class=\"n\">QuantumCircuit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"c1\"># H gate on qubit 0, putting this qubit in a superposition of |0&gt; + |1&gt;.</span>\n<span class=\"n\">circ</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># A CX (CNOT) gate on control qubit 0 and target qubit 1 generating a Bell state.</span>\n<span class=\"n\">circ</span><span class=\"o\">.</span><span class=\"n\">cx</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># CX (CNOT) gate on control qubit 0 and target qubit 2 resulting in a GHZ state.</span>\n<span class=\"n\">circ</span><span class=\"o\">.</span><span class=\"n\">cx</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># Draw the circuit</span>\n<span class=\"n\">circ</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output text_html\"><pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">     \u250c\u2500\u2500\u2500\u2510          \nq_0: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\n     \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510  \u2502  \nq_1: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u253c\u2500\u2500\n          \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510\nq_2: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\n               \u2514\u2500\u2500\u2500\u2518</pre></div></div>\n</div>\n</section>\n<section id=\"supplementary-information\">\n<h2>Supplementary Information<a class=\"headerlink\" href=\"#supplementary-information\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<details class=\"sd-sphinx-override sd-dropdown sd-card sd-mb-3 sd-fade-in-slide-down\">\n<summary class=\"sd-summary-title sd-card-header\">\nQuantum Circuit with conditionals<div class=\"sd-summary-down docutils\">\n<svg version=\"1.1\" width=\"1.5em\" height=\"1.5em\" class=\"sd-octicon sd-octicon-chevron-down\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M5.22 8.72a.75.75 0 000 1.06l6.25 6.25a.75.75 0 001.06 0l6.25-6.25a.75.75 0 00-1.06-1.06L12 14.44 6.28 8.72a.75.75 0 00-1.06 0z\"></path></svg></div>\n<div class=\"sd-summary-up docutils\">\n<svg version=\"1.1\" width=\"1.5em\" height=\"1.5em\" class=\"sd-octicon sd-octicon-chevron-up\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M18.78 15.28a.75.75 0 000-1.06l-6.25-6.25a.75.75 0 00-1.06 0l-6.25 6.25a.75.75 0 101.06 1.06L12 9.56l5.72 5.72a.75.75 0 001.06 0z\"></path></svg></div>\n</summary><div class=\"sd-summary-content sd-card-body docutils\">\n<p class=\"sd-card-text\">When building a quantum circuit, there can be interest in applying a certain gate only\nif a classical register has a specific value. This can be done with the\n<a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.InstructionSet.c_if/#qiskit.circuit.InstructionSet.c_if\" title=\"qiskit.circuit.InstructionSet.c_if\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">InstructionSet.c_if()</span></code></a> method.</p>\n<p class=\"sd-card-text\">In the following example, we start with a single-qubit circuit formed by only a Hadamard gate\n(<a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.library.HGate/#qiskit.circuit.library.HGate\" title=\"qiskit.circuit.library.HGate\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HGate</span></code></a>), in which we expect to get <span class=\"math notranslate nohighlight\">\\(|0\\rangle\\)</span> and <span class=\"math notranslate nohighlight\">\\(|1\\rangle\\)</span>\nwith equal probability.</p>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">qiskit</span> <span class=\"kn\">import</span> <span class=\"n\">BasicAer</span><span class=\"p\">,</span> <span class=\"n\">transpile</span><span class=\"p\">,</span> <span class=\"n\">QuantumRegister</span><span class=\"p\">,</span> <span class=\"n\">ClassicalRegister</span>\n\n<span class=\"n\">qr</span> <span class=\"o\">=</span> <span class=\"n\">QuantumRegister</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">cr</span> <span class=\"o\">=</span> <span class=\"n\">ClassicalRegister</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span> <span class=\"o\">=</span> <span class=\"n\">QuantumCircuit</span><span class=\"p\">(</span><span class=\"n\">qr</span><span class=\"p\">,</span> <span class=\"n\">cr</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"s1\">&#39;mpl&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<img alt=\"../../_images/circuit_1_0.png\" src=\"../../_images/circuit_1_0.png\" />\n</div>\n</div>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">BasicAer</span><span class=\"o\">.</span><span class=\"n\">get_backend</span><span class=\"p\">(</span><span class=\"s1\">&#39;qasm_simulator&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">tqc</span> <span class=\"o\">=</span> <span class=\"n\">transpile</span><span class=\"p\">(</span><span class=\"n\">qc</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"p\">)</span>\n<span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"n\">backend</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">tqc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_counts</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output stream highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>{&#39;1&#39;: 541, &#39;0&#39;: 483}\n</pre></div>\n</div>\n</div>\n</div>\n<p class=\"sd-card-text\">Now, we add an <a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.library.XGate/#qiskit.circuit.library.XGate\" title=\"qiskit.circuit.library.XGate\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">XGate</span></code></a> only if the value of the <a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.ClassicalRegister/#qiskit.circuit.ClassicalRegister\" title=\"qiskit.circuit.ClassicalRegister\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClassicalRegister</span></code></a> is 0.\nThat way, if the state is <span class=\"math notranslate nohighlight\">\\(|0\\rangle\\)</span>, it will be changed to <span class=\"math notranslate nohighlight\">\\(|1\\rangle\\)</span> and\nif the state is <span class=\"math notranslate nohighlight\">\\(|1\\rangle\\)</span>, it will not be changed at all, so the final state will\nalways be <span class=\"math notranslate nohighlight\">\\(|1\\rangle\\)</span>.</p>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">c_if</span><span class=\"p\">(</span><span class=\"n\">cr</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"s1\">&#39;mpl&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<img alt=\"../../_images/circuit_3_0.png\" src=\"../../_images/circuit_3_0.png\" />\n</div>\n</div>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">tqc</span> <span class=\"o\">=</span> <span class=\"n\">transpile</span><span class=\"p\">(</span><span class=\"n\">qc</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"p\">)</span>\n<span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"n\">backend</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">tqc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_counts</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output stream highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>{&#39;1&#39;: 1024}\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</details><details class=\"sd-sphinx-override sd-dropdown sd-card sd-mb-3 sd-fade-in-slide-down\">\n<summary class=\"sd-summary-title sd-card-header\">\nQuantum Circuit Properties<div class=\"sd-summary-down docutils\">\n<svg version=\"1.1\" width=\"1.5em\" height=\"1.5em\" class=\"sd-octicon sd-octicon-chevron-down\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M5.22 8.72a.75.75 0 000 1.06l6.25 6.25a.75.75 0 001.06 0l6.25-6.25a.75.75 0 00-1.06-1.06L12 14.44 6.28 8.72a.75.75 0 00-1.06 0z\"></path></svg></div>\n<div class=\"sd-summary-up docutils\">\n<svg version=\"1.1\" width=\"1.5em\" height=\"1.5em\" class=\"sd-octicon sd-octicon-chevron-up\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M18.78 15.28a.75.75 0 000-1.06l-6.25-6.25a.75.75 0 00-1.06 0l-6.25 6.25a.75.75 0 101.06 1.06L12 9.56l5.72 5.72a.75.75 0 001.06 0z\"></path></svg></div>\n</summary><div class=\"sd-summary-content sd-card-body docutils\">\n<p class=\"sd-card-text\">When constructing quantum circuits, there are several properties that help quantify\nthe \u201csize\u201d of the circuits, and their ability to be run on a noisy quantum device.\nSome of these, like number of qubits, are straightforward to understand, while others\nlike depth and number of tensor components require a bit more explanation.  Here we will\nexplain all of these properties, and, in preparation for understanding how circuits change\nwhen run on actual devices, highlight the conditions under which they change.</p>\n<p class=\"sd-card-text\">Consider the following circuit:</p>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">qiskit</span> <span class=\"kn\">import</span> <span class=\"n\">QuantumCircuit</span>\n<span class=\"n\">qc</span> <span class=\"o\">=</span> <span class=\"n\">QuantumCircuit</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n   <span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">)</span>\n   <span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">cx</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">cx</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">cx</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">cx</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output text_html\"><pre style=\"word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace\">      \u250c\u2500\u2500\u2500\u2510                                                           \n q_0: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n      \u251c\u2500\u2500\u2500\u2524  \u2502                                                        \n q_1: \u2524 H \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n      \u251c\u2500\u2500\u2500\u2524  \u2502    \u2502                   \u2502    \u2502         \u2502                \n q_2: \u2524 H \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n      \u251c\u2500\u2500\u2500\u2524  \u2502    \u2502    \u2502              \u2502    \u2502         \u2502                \n q_3: \u2524 H \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n      \u251c\u2500\u2500\u2500\u2524  \u2502    \u2502    \u2502    \u2502         \u2502    \u2502         \u2502                \n q_4: \u2524 H \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n      \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510  \u2502    \u2502    \u2502    \u2502    \u2502    \u2502         \u2502                \n q_5: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n           \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510  \u2502    \u2502    \u2502    \u2502    \u2502         \u2502           \u250c\u2500\u2500\u2500\u2510\n q_6: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500X\u2500\u2500X\u2500\u2500X\u2500\u2524 X \u251c\n                \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510  \u2502    \u2502  \u250c\u2500\u2534\u2500\u2510  \u2502  \u250c\u2500\u2500\u2500\u2510  \u2502   \u2502  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2518\n q_7: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2524 X \u251c\u2500\u2500\u253c\u2500\u2500\u2524 X \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\n                     \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510  \u2502  \u251c\u2500\u2500\u2500\u2524  \u2502  \u2514\u2500\u2500\u2500\u2518  \u2502   \u2502  \u2502  \u2502      \n q_8: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u253c\u2500\u2500\u2524 X \u251c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\n                          \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510\u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510       \u2502   \u2502  \u2502  \u2502      \n q_9: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500X\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\n                               \u2514\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2518       \u2502   \u2502     \u2502      \nq_10: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\n                                                   \u250c\u2500\u2534\u2500\u2510 \u2502            \nq_11: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500X\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                                                   \u2514\u2500\u2500\u2500\u2518              </pre></div></div>\n</div>\n<p class=\"sd-card-text\">From the plot, it is easy to see that this circuit has 12 qubits, and a collection of\nHadamard, CNOT, X, and SWAP gates.  But how to quantify this programmatically? Because we\ncan do single-qubit gates on all the qubits simultaneously, the number of qubits in this\ncircuit is equal to the <strong>width</strong> of the circuit:</p>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output text_plain highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>12\n</pre></div>\n</div>\n</div>\n</div>\n<p class=\"sd-card-text\">We can also just get the number of qubits directly:</p>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">num_qubits</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output text_plain highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>12\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"admonition important\">\n<p class=\"admonition-title\">Important</p>\n<p class=\"sd-card-text\">For a quantum circuit composed from just qubits, the circuit width is equal\nto the number of qubits. This is the definition used in quantum computing. However,\nfor more complicated circuits with classical registers, and classically controlled gates,\nthis equivalence breaks down. As such, from now on we will not refer to the number of\nqubits in a quantum circuit as the width.</p>\n</div>\n<p class=\"sd-card-text\">It is also straightforward to get the number and type of the gates in a circuit using\n<a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.QuantumCircuit.count_ops/#qiskit.circuit.QuantumCircuit.count_ops\" title=\"qiskit.circuit.QuantumCircuit.count_ops\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuantumCircuit.count_ops()</span></code></a>:</p>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">count_ops</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output text_plain highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>OrderedDict([(&#39;cx&#39;, 8), (&#39;h&#39;, 5), (&#39;x&#39;, 3), (&#39;swap&#39;, 3)])\n</pre></div>\n</div>\n</div>\n</div>\n<p class=\"sd-card-text\">We can also get just the raw count of operations by computing the circuits\n<a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.QuantumCircuit.size/#qiskit.circuit.QuantumCircuit.size\" title=\"qiskit.circuit.QuantumCircuit.size\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuantumCircuit.size()</span></code></a>:</p>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output text_plain highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>19\n</pre></div>\n</div>\n</div>\n</div>\n<p class=\"sd-card-text\">A particularly important circuit property is known as the circuit <strong>depth</strong>.  The depth\nof a quantum circuit is a measure of how many \u201clayers\u201d of quantum gates, executed in\nparallel, it takes to complete the computation defined by the circuit.  Because quantum\ngates take time to implement, the depth of a circuit roughly corresponds to the amount of\ntime it takes the quantum computer to execute the circuit.  Thus, the depth of a circuit\nis one important quantity used to measure if a quantum circuit can be run on a device.</p>\n<p class=\"sd-card-text\">The depth of a quantum circuit has a mathematical definition as the longest path in a\ndirected acyclic graph (DAG).  However, such a definition is a bit hard to grasp, even for\nexperts.  Fortunately, the depth of a circuit can be easily understood by anyone familiar\nwith playing <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Tetris\">Tetris</a>.  Lets see how to compute this\ngraphically:</p>\n<img alt=\"../../_images/depth.gif\" src=\"../../_images/depth.gif\" />\n<br><br><p class=\"sd-card-text\">We can verify our graphical result using <a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.QuantumCircuit.depth/#qiskit.circuit.QuantumCircuit.depth\" title=\"qiskit.circuit.QuantumCircuit.depth\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuantumCircuit.depth()</span></code></a>:</p>\n<div class=\"jupyter_cell jupyter_container docutils container\">\n<div class=\"cell_input code_cell docutils container\">\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">qc</span><span class=\"o\">.</span><span class=\"n\">depth</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"cell_output docutils container\">\n<div class=\"output text_plain highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>9\n</pre></div>\n</div>\n</div>\n</div>\n<br></div>\n</details></section>\n<section id=\"quantum-circuit-api\">\n<h2>Quantum Circuit API<a class=\"headerlink\" href=\"#quantum-circuit-api\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<section id=\"quantum-circuit-construction\">\n<h3>Quantum Circuit Construction<a class=\"headerlink\" href=\"#quantum-circuit-construction\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<table class=\"autosummary longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.QuantumCircuit/#qiskit.circuit.QuantumCircuit\" title=\"qiskit.circuit.QuantumCircuit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QuantumCircuit</span></code></a>(*regs[,\u00a0name,\u00a0global_phase,\u00a0...])</p></td>\n<td><p>Create a new circuit.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.QuantumRegister/#qiskit.circuit.QuantumRegister\" title=\"qiskit.circuit.QuantumRegister\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QuantumRegister</span></code></a>([size,\u00a0name,\u00a0bits])</p></td>\n<td><p>Implement a quantum register.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.Qubit/#qiskit.circuit.Qubit\" title=\"qiskit.circuit.Qubit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Qubit</span></code></a>([register,\u00a0index])</p></td>\n<td><p>Implement a quantum bit.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.ClassicalRegister/#qiskit.circuit.ClassicalRegister\" title=\"qiskit.circuit.ClassicalRegister\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClassicalRegister</span></code></a>([size,\u00a0name,\u00a0bits])</p></td>\n<td><p>Implement a classical register.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.Clbit/#qiskit.circuit.Clbit\" title=\"qiskit.circuit.Clbit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Clbit</span></code></a>([register,\u00a0index])</p></td>\n<td><p>Implement a classical bit.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.AncillaRegister/#qiskit.circuit.AncillaRegister\" title=\"qiskit.circuit.AncillaRegister\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AncillaRegister</span></code></a>([size,\u00a0name,\u00a0bits])</p></td>\n<td><p>Implement an ancilla register.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.AncillaQubit/#qiskit.circuit.AncillaQubit\" title=\"qiskit.circuit.AncillaQubit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AncillaQubit</span></code></a>([register,\u00a0index])</p></td>\n<td><p>A qubit used as ancillary qubit.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.CircuitInstruction/#qiskit.circuit.CircuitInstruction\" title=\"qiskit.circuit.CircuitInstruction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CircuitInstruction</span></code></a>(operation[,\u00a0qubits,\u00a0clbits])</p></td>\n<td><p>A single instruction in a <a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.QuantumCircuit/#qiskit.circuit.QuantumCircuit\" title=\"qiskit.circuit.QuantumCircuit\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuantumCircuit</span></code></a>, comprised of the <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">operation</span></code> and various operands.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"gates-and-instructions\">\n<h3>Gates and Instructions<a class=\"headerlink\" href=\"#gates-and-instructions\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<table class=\"autosummary longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.Gate/#qiskit.circuit.Gate\" title=\"qiskit.circuit.Gate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Gate</span></code></a>(name,\u00a0num_qubits,\u00a0params[,\u00a0label])</p></td>\n<td><p>Unitary gate.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.ControlledGate/#qiskit.circuit.ControlledGate\" title=\"qiskit.circuit.ControlledGate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ControlledGate</span></code></a>(name,\u00a0num_qubits,\u00a0params[,\u00a0...])</p></td>\n<td><p>Controlled unitary gate.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.Delay/#qiskit.circuit.Delay\" title=\"qiskit.circuit.Delay\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Delay</span></code></a>(duration[,\u00a0unit])</p></td>\n<td><p>Do nothing and just delay/wait/idle for a specified duration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.Instruction/#qiskit.circuit.Instruction\" title=\"qiskit.circuit.Instruction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Instruction</span></code></a>(name,\u00a0num_qubits,\u00a0num_clbits,\u00a0params)</p></td>\n<td><p>Generic quantum instruction.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.InstructionSet/#qiskit.circuit.InstructionSet\" title=\"qiskit.circuit.InstructionSet\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">InstructionSet</span></code></a>([circuit_cregs,\u00a0...])</p></td>\n<td><p>Instruction collection, and their contexts.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.Operation/#qiskit.circuit.Operation\" title=\"qiskit.circuit.Operation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Operation</span></code></a>()</p></td>\n<td><p>Quantum Operation Interface Class.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.EquivalenceLibrary/#qiskit.circuit.EquivalenceLibrary\" title=\"qiskit.circuit.EquivalenceLibrary\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EquivalenceLibrary</span></code></a>(*[,\u00a0base])</p></td>\n<td><p>A library providing a one-way mapping of Gates to their equivalent implementations as QuantumCircuits.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"control-flow-operations\">\n<h3>Control Flow Operations<a class=\"headerlink\" href=\"#control-flow-operations\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<table class=\"autosummary longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.ControlFlowOp/#qiskit.circuit.ControlFlowOp\" title=\"qiskit.circuit.ControlFlowOp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ControlFlowOp</span></code></a>(name,\u00a0num_qubits,\u00a0num_clbits,\u00a0...)</p></td>\n<td><p>Abstract class to encapsulate all control flow operations.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.IfElseOp/#qiskit.circuit.IfElseOp\" title=\"qiskit.circuit.IfElseOp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IfElseOp</span></code></a>(condition,\u00a0true_body[,\u00a0false_body,\u00a0...])</p></td>\n<td><p>A circuit operation which executes a program (<code class=\"docutils literal notranslate\"><span class=\"pre\">true_body</span></code>) if a provided condition (<code class=\"docutils literal notranslate\"><span class=\"pre\">condition</span></code>) evaluates to true, and optionally evaluates another program (<code class=\"docutils literal notranslate\"><span class=\"pre\">false_body</span></code>) otherwise.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.WhileLoopOp/#qiskit.circuit.WhileLoopOp\" title=\"qiskit.circuit.WhileLoopOp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">WhileLoopOp</span></code></a>(condition,\u00a0body[,\u00a0label])</p></td>\n<td><p>A circuit operation which repeatedly executes a subcircuit (<code class=\"docutils literal notranslate\"><span class=\"pre\">body</span></code>) until a condition (<code class=\"docutils literal notranslate\"><span class=\"pre\">condition</span></code>) evaluates as False.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.ForLoopOp/#qiskit.circuit.ForLoopOp\" title=\"qiskit.circuit.ForLoopOp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ForLoopOp</span></code></a>(indexset,\u00a0loop_parameter,\u00a0body[,\u00a0...])</p></td>\n<td><p>A circuit operation which repeatedly executes a subcircuit (<code class=\"docutils literal notranslate\"><span class=\"pre\">body</span></code>) parameterized by a parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">loop_parameter</span></code> through the set of integer values provided in <code class=\"docutils literal notranslate\"><span class=\"pre\">indexset</span></code>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.BreakLoopOp/#qiskit.circuit.BreakLoopOp\" title=\"qiskit.circuit.BreakLoopOp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BreakLoopOp</span></code></a>(num_qubits,\u00a0num_clbits[,\u00a0label])</p></td>\n<td><p>A circuit operation which, when encountered, jumps to the end of the nearest enclosing loop.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.ContinueLoopOp/#qiskit.circuit.ContinueLoopOp\" title=\"qiskit.circuit.ContinueLoopOp\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ContinueLoopOp</span></code></a>(num_qubits,\u00a0num_clbits[,\u00a0label])</p></td>\n<td><p>A circuit operation which, when encountered, moves to the next iteration of the nearest enclosing loop.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"parametric-quantum-circuits\">\n<h3>Parametric Quantum Circuits<a class=\"headerlink\" href=\"#parametric-quantum-circuits\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<table class=\"autosummary longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.Parameter/#qiskit.circuit.Parameter\" title=\"qiskit.circuit.Parameter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Parameter</span></code></a>(name)</p></td>\n<td><p>Parameter Class for variable parameters.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.ParameterVector/#qiskit.circuit.ParameterVector\" title=\"qiskit.circuit.ParameterVector\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ParameterVector</span></code></a>(name[,\u00a0length])</p></td>\n<td><p>ParameterVector class to quickly generate lists of parameters.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.ParameterExpression/#qiskit.circuit.ParameterExpression\" title=\"qiskit.circuit.ParameterExpression\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ParameterExpression</span></code></a>(symbol_map,\u00a0expr)</p></td>\n<td><p>ParameterExpression class to enable creating expressions of Parameters.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"random-circuits\">\n<h3>Random Circuits<a class=\"headerlink\" href=\"#random-circuits\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<table class=\"autosummary longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"../../stubs/qiskit.circuit.random.random_circuit/#qiskit.circuit.random.random_circuit\" title=\"qiskit.circuit.random.random_circuit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">random.random_circuit</span></code></a>(num_qubits,\u00a0depth[,\u00a0...])</p></td>\n<td><p>Generate random circuit of arbitrary size and form.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n</section>\n</section>\n",
    "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n",
    "rellinks": [
        [
            "genindex",
            "General Index",
            "I",
            "index"
        ],
        [
            "py-modindex",
            "Python Module Index",
            "",
            "modules"
        ],
        [
            "stubs/qiskit.circuit.QuantumCircuit",
            "QuantumCircuit",
            "N",
            "next"
        ],
        [
            "apidocs/terra",
            "Qiskit Terra API Reference",
            "P",
            "previous"
        ]
    ],
    "sourcename": "apidocs/circuit.rst.txt",
    "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Quantum Circuits (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit.circuit</span></code>)</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#supplementary-information\">Supplementary Information</a></li>\n<li><a class=\"reference internal\" href=\"#quantum-circuit-api\">Quantum Circuit API</a><ul>\n<li><a class=\"reference internal\" href=\"#quantum-circuit-construction\">Quantum Circuit Construction</a></li>\n<li><a class=\"reference internal\" href=\"#gates-and-instructions\">Gates and Instructions</a></li>\n<li><a class=\"reference internal\" href=\"#control-flow-operations\">Control Flow Operations</a></li>\n<li><a class=\"reference internal\" href=\"#parametric-quantum-circuits\">Parametric Quantum Circuits</a></li>\n<li><a class=\"reference internal\" href=\"#random-circuits\">Random Circuits</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "display_toc": true,
    "page_source_suffix": ".rst",
    "current_page_name": "apidocs/circuit",
    "sidebars": [
        "localtoc.html",
        "relations.html",
        "sourcelink.html",
        "searchbox.html"
    ],
    "customsidebar": null,
    "favicon_url": null,
    "logo_url": null,
    "alabaster_version": "0.7.12"
}