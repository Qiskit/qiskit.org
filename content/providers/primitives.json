{
  "id": "primitives",
  "title": "Native Primitives",
  "description": "Services or software packages that provide native support to Qiskit Primitives. Qiskit Primitives provide a set of interfaces for performing operations such as sampling (Sampler) and estimating (Estimator) that forms the fundamental building blocks of quantum algorithm development.",
  "providers": [
    {
      "title": "IBM Qiskit Runtime",
      "description": "Qiskit Runtime is a quantum computing service and programming model that allows users to optimize workloads and efficiently execute them on quantum systems at scale. The programming model extends the existing interface in Qiskit with a set of new primitive programs.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-ibm-runtime"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://quantum-computing.ibm.com/lab/docs/iql/runtime/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit.org/documentation/partners/qiskit_ibm_runtime/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/Qiskit/qiskit-ibm-runtime"
      },
      "codeExamples": [
        {
          "name": "Sampling Bell Circuit",
          "runMethod": "sampler",
          "fullCode": [
            "from qiskit_ibm_runtime import QiskitRuntimeService, Sampler",
            "service = QiskitRuntimeService()",
            "backend = service.backend(\"ibm_perth\")",
            "sampler = Sampler(session=backend)",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Run the circuit and get result distribution",
            "job = sampler.run(circuit)",
            "quasi_dist = job.result().quasi_dists[0]",
            "print(quasi_dist)"
          ]
        }
      ]
    },
    {
      "title": "Aer",
      "description": "Aer is a high performance simulator for quantum circuits that includes noise models.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-aer"
      ],
      "websiteCta": {
        "label": null,
        "url": null
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit.org/ecosystem/aer/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/Qiskit/qiskit-aer"
      },
      "codeExamples": [
        {
          "name": "Sampling Bell Circuit",
          "runMethod": "sampler",
          "fullCode": [
            "from qiskit_aer.primitives import Sampler",
            "sampler = Sampler()",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Run the circuit and get result distribution",
            "job = sampler.run(circuit)",
            "quasi_dist = job.result().quasi_dists[0]",
            "print(quasi_dist)"
          ]
        }
      ]
    }
  ]
}