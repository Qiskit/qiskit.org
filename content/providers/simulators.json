[
  {
    "title": "Qiskit Aer",
    "image": null,
    "description": "Qiskit Aer is a high performance simulator for quantum circuits that includes noise models.",
    "installation": "pip install qiskit-aer",
    "websiteCta": {
      "label": null,
      "url": null
    },
    "docCta": {
      "label": "Docs",
      "url": "https://qiskit.org/documentation/aer/"
    },
    "sourceCta": {
      "label": "GitHub",
      "url": "https://github.com/Qiskit/qiskit-aer"
    },
    "helloWorldExample": [
      "from qiskit import QuantumCircuit, transpile\n",
      "from qiskit_aer import AerSimulator\n",
      "\n",
      "# Select a backend\n",
      "backend = AerSimulator()\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  },
  {
    "title": "NVIDIA cuQuantum Appliance",
    "image": null,
    "description": "The NVIDIA cuQuantum Appliance is a highly performant multi-GPU multi-node solution for quantum circuit simulation.",
    "installation": "docker pull nvcr.io/nvidia/cuquantum-appliance",
    "websiteCta": {
      "label": "Website",
      "url": "https://developer.nvidia.com/cuquantum-sdk"
    },
    "docCta": {
      "label": "Docs",
      "url": "https://docs.nvidia.com/cuda/cuquantum/index.html"
    },
    "sourceCta": {
      "label": "GitHub",
      "url": "https://github.com/NVIDIA/cuQuantum"
    },
    "helloWorldExample": [
      "from qiskit import QuantumCircuit, transpile\n",
      "from cusvaer.backends import StatevectorSimulator\n",
      "\n",
      "# Select a backend\n",
      "backend = StatevectorSimulator()\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  }
]
