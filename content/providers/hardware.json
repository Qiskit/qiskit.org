[
  {
    "title": "IBM Qiskit Runtime",
    "image": "static/images/providers/qiskit-ibm-runtime.png",
    "description": "Qiskit Runtime is a quantum computing service and programming model that allows users to optimize workloads and efficiently execute them on quantum systems at scale. The programming model extends the existing interface in Qiskit with a set of new primitive programs.",
    "installation": "pip install qiskit-ibm-runtime",
    "websiteCta": {
      "label": "Website",
      "url": "https://quantum-computing.ibm.com/lab/docs/iql/runtime/"
    },
    "docCta": {
      "label": "Docs",
      "url": "https://qiskit.org/documentation/partners/qiskit_ibm_runtime/"
    },
    "sourceCta": {
      "label": "GitHub",
      "url": "https://github.com/Qiskit/qiskit-ibm-runtime"
    },
    "helloWorldExample": [
      "from qiskit import QuantumCircuit\n",
      "from qiskit_ibm_runtime import QiskitRuntimeService, Sampler\n",
      "\n",
      "# Save an IBM Quantum account\n",
      "QiskitRuntimeService.save_account(channel=\"ibm_quantum\", token=\"MY_IBM_QUANTUM_TOKEN\")\n",
      "\n",
      "# Select a backend\n",
      "service = QiskitRuntimeService()\n",
      "backend = service.backend(\"ibmq_qasm_simulator\")\n",
      "\n",
      "# Build a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "\n",
      "# Run the circuit and get result distribution\n",
      "sampler = Sampler(session=backend)\n",
      "job = sampler.run(circuit)\n",
      "quasi_dist = job.result().quasi_dists[0]\n",
      "print(quasi_dist)"
    ]
  },
  {
    "title": "IBM Quantum Platform",
    "image": "static/images/providers/qiskit-ibm-provider.png",
    "description": "IBM Quantum platform offers access to IBM Quantum systems and simulators.",
    "installation": "pip install qiskit-ibm-provider",
    "websiteCta": {
      "label": "Website",
      "url": "https://www.ibm.com/quantum/systems"
    },
    "docCta": {
      "label": "Docs",
      "url": "https://qiskit.org/documentation/partners/qiskit_ibm_provider/"
    },
    "sourceCta": {
      "label": "GitHub",
      "url": "https://github.com/Qiskit/qiskit-ibm-provider"
    },
    "helloWorldExample": [
      "from qiskit import QuantumCircuit, transpile\n",
      "from qiskit_ibm_provider import IBMProvider\n",
      "\n",
      "\n",
      "# Save an IBM Quantum account\n",
      "IBMProvider.save_account(\"MY_IBM_QUANTUM_TOKEN\")\n",
      "\n",
      "# Select a backend\n",
      "provider = IBMProvider()\n",
      "backend = provider.get_backend(\"ibmq_qasm_simulator\")\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  },
  {
    "title": "IonQ",
    "image": null,
    "description": "Qiskit provider for IonQ backends.",
    "installation": "pip install qiskit-ionq",
    "websiteCta": {
      "label": "Website",
      "url": "https://ionq.com/"
    },
    "docCta": {
      "label": "Docs",
      "url": "https://qiskit.org/documentation/partners/ionq/"
    },
    "sourceCta": {
      "label": "GitHub",
      "url": "https://github.com/Qiskit-Partners/qiskit-ionq"
    },
    "helloWorldExample": [
      "from qiskit import QuantumCircuit\n",
      "from qiskit_ionq import IonQProvider\n",
      "\n",
      "# Select a backend\n",
      "provider = IonQProvider(\"MY_IONQ_TOKEN\")\n",
      "backend = provider.get_backend(\"ionq_simulator\")\n",
      "\n",
      "# Build a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(circuit)\n",
      "counts = job.get_counts()\n",
      "print(counts)"
    ]
  },
  {
    "title": "Quantinuum",
    "image": null,
    "description": "Qiskit provider for Quantinuum backends.",
    "installation": "pip install qiskit-quantinuum-provider",
    "websiteCta": {
      "label": "Website",
      "url": "https://www.quantinuum.com/"
    },
    "docCta": {
      "label": "Docs",
      "url": "https://github.com/qiskit-community/qiskit-quantinuum-provider/blob/master/examples/QuantinuumExample.ipynb"
    },
    "sourceCta": {
      "label": "GitHub",
      "url": "https://github.com/qiskit-community/qiskit-quantinuum-provider"
    },
    "helloWorldExample": [
      "from qiskit import QuantumCircuit, transpile\n",
      "from qiskit_quantinuum import Quantinuum\n",
      "\n",
      "# Save account\n",
      "Quantinuum.save_account(\"username@company.com\")\n",
      "\n",
      "# Select backend\n",
      "backend = Quantinuum.backends(\"DEVICE_NAME\")\n",
      "\n",
      "# Build and transpile circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  }
]