{
  "id": "hardware",
  "title": "Quantum Hardware",
  "description": "Cloud services that allow users to execute quantum programs in specialized hardware that leverages quantum mechanical phenomena for quantum computation.",
  "providers": [
    {
      "title": "AQT",
      "description": "AQT provides access to Calcium trapped-ion quantum devices.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-aqt-provider"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://www.aqt.eu/qc-systems/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit.org/documentation/partners/aqt/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/Qiskit-Partners/qiskit-aqt-provider"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_aqt_provider import AQTProvider",
            "aqt = AQTProvider('MY_TOKEN')",
            "backend = aqt.get_backend('aqt_qasm_simulator')",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    },
    {
      "title": "IBM Quantum",
      "description": "IBM Quantum offers both open and premium access to a wide variety of quantum systems. All quantum systems deployed by IBM Quantum are based on superconducting qubit technology, as the control and scalability of this technology pave a clear path to achieving quantum advantage with these systems.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-ibm-provider"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://quantum-computing.ibm.com/services?services=systems"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit.org/documentation/partners/qiskit_ibm_provider/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/Qiskit/qiskit-ibm-provider"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_ibm_provider import IBMProvider",
            "IBMProvider.save_account(\"MY_IBM_QUANTUM_TOKEN\")",
            "provider = IBMProvider()",
            "backend = provider.get_backend(\"ibm_nairobi\")",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    },
    {
      "title": "IonQ",
      "description": "IonQ offers access to Ytterbium trapped-ion quantum computers with high gate fidelity, long coherence time and all-to-all connectivity.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-ionq"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://ionq.com/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit.org/documentation/partners/ionq/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/Qiskit-Partners/qiskit-ionq"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_ionq import IonQProvider",
            "provider = IonQProvider(\"MY_IONQ_TOKEN\")",
            "backend = provider.get_backend(\"ionq_qpu\")",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    },
    {
      "title": "IQM",
      "description": "IQM offers access to gate-model based superconducting qubits quantum systems.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-iqm"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://www.meetiqm.com/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://iqm-finland.github.io/qiskit-on-iqm/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/iqm-finland/qiskit-on-iqm"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_iqm import IQMProvider",
            "provider = IQMProvider(iqm_server_url)",
            "backend = provider.get_backend()",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    },
    {
      "title": "Quantinuum",
      "description": "Quantinuum provides access to Ytterbium trapped-ion systems with high-fidelity, fully connected qubits, and the ability to perform mid-circuit measurement.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-quantinuum-provider"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://www.quantinuum.com/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://github.com/qiskit-community/qiskit-quantinuum-provider/blob/master/examples/QuantinuumExample.ipynb"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/qiskit-community/qiskit-quantinuum-provider"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_quantinuum import Quantinuum",
            "Quantinuum.save_account(\"username@company.com\")",
            "backend = Quantinuum.get_backend(\"DEVICE_NAME\")",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    },
    {
      "title": "Rigetti",
      "description": "Rigetti offers access to universal, gate-model machines based on tunable superconducting qubits.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-rigetti"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://www.rigetti.com/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit-rigetti.readthedocs.io/en/latest/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/rigetti/qiskit-rigetti"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_rigetti import RigettiQCSProvider",
            "provider = RigettiQCSProvider()",
            "backend = provider.get_backend(name=\"Aspen-9\")",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    }
  ]
}