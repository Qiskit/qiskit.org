[
  {
    "name": "IBM Qiskit Runtime",
    "image": "static/images/providers/qiskit-ibm-runtime.png",
    "installation": "pip install qiskit-ibm-runtime",
    "description": "Qiskit Runtime is a quantum computing service and programming model that allows users to optimize workloads and efficiently execute them on quantum systems at scale. The programming model extends the existing interface in Qiskit with a set of new primitive programs.",
    "websiteUrl": "https://quantum-computing.ibm.com/lab/docs/iql/runtime/",
    "docUrl": "https://qiskit.org/documentation/partners/qiskit_ibm_runtime/",
    "sourceUrl": "https://github.com/Qiskit/qiskit-ibm-runtime",
    "sourceLabel": "GitHub",
    "helloWorldExample": [
      "from qiskit import QuantumCircuit\n",
      "from qiskit_ibm_runtime import QiskitRuntimeService, Sampler\n",
      "\n",
      "# Save an IBM Quantum account\n",
      "QiskitRuntimeService.save_account(channel=\"ibm_quantum\", token=\"MY_IBM_QUANTUM_TOKEN\")\n",
      "\n",
      "# Select a backend\n",
      "service = QiskitRuntimeService()\n",
      "backend = service.backend(\"ibmq_qasm_simulator\")\n",
      "\n",
      "# Build a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "\n",
      "# Run the circuit and get result distribution\n",
      "sampler = Sampler(session=backend)\n",
      "job = sampler.run(circuit)\n",
      "quasi_dist = job.result().quasi_dists[0]\n",
      "print(quasi_dist)"
    ]
  },
  {
    "name": "IBM Quantum Platform",
    "image": "static/images/providers/qiskit-ibm-provider.png",
    "installation": "pip install qiskit-ibm-provider",
    "description": "IBM Quantum platform offers access to IBM Quantum systems and simulators.",
    "websiteUrl": "https://www.ibm.com/quantum/systems",
    "docUrl": "https://qiskit.org/documentation/partners/qiskit_ibm_provider/",
    "sourceUrl": "https://github.com/Qiskit/qiskit-ibm-provider",
    "sourceLabel": "GitHub",
    "helloWorldExample": [
      "from qiskit import QuantumCircuit, transpile\n",
      "from qiskit_ibm_provider import IBMProvider\n",
      "\n",
      "\n",
      "# Save an IBM Quantum account\n",
      "IBMProvider.save_account(\"MY_IBM_QUANTUM_TOKEN\")\n",
      "\n",
      "# Select a backend\n",
      "provider = IBMProvider()\n",
      "backend = provider.get_backend(\"ibmq_qasm_simulator\")\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  },
  {
    "name": "IonQ",
    "image": null,
    "installation": "pip install qiskit-ionq",
    "description": "Qiskit provider for IonQ backends.",
    "websiteUrl": "https://ionq.com/",
    "docUrl": "https://qiskit.org/documentation/partners/ionq/",
    "sourceUrl": "https://github.com/Qiskit-Partners/qiskit-ionq",
    "sourceLabel": "GitHub",
    "helloWorldExample": [
      "from qiskit import QuantumCircuit\n",
      "from qiskit_ionq import IonQProvider\n",
      "\n",
      "# Select a backend\n",
      "provider = IonQProvider(\"MY_IONQ_TOKEN\")\n",
      "backend = provider.get_backend(\"ionq_simulator\")\n",
      "\n",
      "# Build a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(circuit)\n",
      "counts = job.get_counts()\n",
      "print(counts)"
    ]
  },
  {
    "name": "Azure Quantum",
    "image": null,
    "installation": "pip install \"azure-quantum[qiskit]\"",
    "description": "Qiskit provider for IonQ backends.",
    "websiteUrl": "https://aka.ms/aq",
    "docUrl": "https://aka.ms/AQ/Qiskit/QuickStart",
    "sourceUrl": null,
    "sourceLabel": null,
    "helloWorldExample": [
      "from qiskit import QuantumCircuit\n",
      "from azure.quantum.qiskit import AzureQuantumProvider\n",
      "\n",
      "# Connect to Azure Quantum service\n",
      "provider = AzureQuantumProvider(\n",
      "  resource_id=\"MY_RESOURCE_ID\",\n",
      "  location=\"MY_LOCATION\"\n",
      ")\n",
      "\n",
      "# select a backend\n",
      "backend = provider.get_backend(\"ionq.simulator\")\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  },
  {
    "name": "Amazon Braket",
    "image": null,
    "installation": "pip install qiskit_braket_provider",
    "description": "Execute Qiskit programs on AWS quantum computing hardware devices through Amazon Braket",
    "websiteUrl": "https://aws.amazon.com/braket/",
    "docUrl": "https://qiskit-community.github.io/qiskit-braket-provider/",
    "sourceUrl": "https://github.com/qiskit-community/qiskit-braket-provider",
    "sourceLabel": "GitHub",
    "helloWorldExample": [
      "from qiskit import QuantumCircuit, transpile\n",
      "from qiskit_braket_provider import AWSBraketProvider\n",
      "\n",
      "# Select a backend\n",
      "provider = AWSBraketProvider()\n",
      "backend = provider.backends(\"SV1\")\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  },
  {
    "name": "Quantinuum",
    "image": null,
    "installation": "pip install qiskit-quantinuum-provider",
    "description": "Qiskit provider for Quantinuum backends.",
    "websiteUrl": "https://aws.amazon.com/braket/",
    "docUrl": "https://qiskit-community.github.io/qiskit-braket-provider/",
    "sourceUrl": "https://github.com/qiskit-community/qiskit-braket-provider",
    "sourceLabel": "GitHub",
    "helloWorldExample": [
      "from qiskit import QuantumCircuit, transpile\n",
      "from qiskit_braket_provider import AWSBraketProvider\n",
      "\n",
      "# Select a backend\n",
      "provider = AWSBraketProvider()\n",
      "backend = provider.backends(\"SV1\")\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
]