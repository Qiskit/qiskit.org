[
    {
    "title": "Azure Quantum",
    "image": null,
    "description": "Qiskit provider for IonQ backends.",
    "installation": "pip install \"azure-quantum[qiskit]\"",
    "websiteCta": {
      "label": "Website",
      "url": "https://aka.ms/aq" 
    },
    "docCta": {
      "label": "Docs",
      "url": "https://aka.ms/AQ/Qiskit/QuickStart"
    },
    "sourceCta": {
      "label": null,
      "url": null
    },
    "helloWorldExample": [
      "from qiskit import QuantumCircuit\n",
      "from azure.quantum.qiskit import AzureQuantumProvider\n",
      "\n",
      "# Connect to Azure Quantum service\n",
      "provider = AzureQuantumProvider(\n",
      "  resource_id=\"MY_RESOURCE_ID\",\n",
      "  location=\"MY_LOCATION\"\n",
      ")\n",
      "\n",
      "# select a backend\n",
      "backend = provider.get_backend(\"ionq.simulator\")\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  },
  {
    "title": "Amazon Braket",
    "image": null,
    "description": "Execute Qiskit programs on AWS quantum computing hardware devices through Amazon Braket",
    "installation": "pip install qiskit_braket_provider",
    "websiteCta": {
      "label": "Website",
      "url": "https://aws.amazon.com/braket/"
    },
    "docCta": {
      "label": "Docs",
      "url": "https://qiskit-community.github.io/qiskit-braket-provider/"
    },
    "sourceCta": {
      "label": "GitHub",
      "url": "https://github.com/qiskit-community/qiskit-braket-provider"
    },
    "helloWorldExample": [
      "from qiskit import QuantumCircuit, transpile\n",
      "from qiskit_braket_provider import AWSBraketProvider\n",
      "\n",
      "# Select a backend\n",
      "provider = AWSBraketProvider()\n",
      "backend = provider.backends(\"SV1\")\n",
      "\n",
      "# Build and transpile a circuit\n",
      "circuit = QuantumCircuit(2, 2)\n",
      "circuit.h(0)\n",
      "circuit.cx(0,1)\n",
      "circuit.measure([0,1], [0,1])\n",
      "transpiled_circuit = transpile(circuit, backend)\n",
      "\n",
      "# Run the circuit and get result counts\n",
      "job = backend.run(transpiled_circuit)\n",
      "counts = job.result().get_counts()\n",
      "print(counts)"
    ]
  }
]
