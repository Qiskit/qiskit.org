{
  "id": "runtimes",
  "title": "Quantum Runtimes",
  "description": "Cloud services that allow quantum-classical hybrid computations. Sometimes called near-team computing, this computation model allows relative quick iteration between classical and quantum processors, which is useful for variational algorithms.",
  "providers": [
    {
      "title": "IBM Qiskit Runtime",
      "description": "Qiskit Runtime is a quantum computing service and programming model that allows users to optimize workloads and efficiently execute them on quantum systems at scale. The programming model extends the existing interface in Qiskit with a set of new primitive programs.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-ibm-runtime"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://quantum-computing.ibm.com/lab/docs/iql/runtime/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit.org/documentation/partners/qiskit_ibm_runtime/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/Qiskit/qiskit-ibm-runtime"
      },
      "codeExamples": [
        {
          "name": "Transpiling",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_ibm_runtime import QiskitRuntimeService, Sampler",
            "service = QiskitRuntimeService()",
            "backend = service.backend(\"ibmq_qasm_simulator\")",
            "sampler = Sampler(session=backend)",
            "&nbsp;",
            "# Build circuit",
            "from qiskit.circuit.library import QuantumVolume",
            "circuit = QuantumVolume(5)",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "transpiled_circuit.draw()"
          ]
        }
      ]
    }
  ]
}