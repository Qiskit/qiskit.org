description: Cloud services that allow users to execute quantum programs in specialized
  hardware that leverages quantum mechanical phenomena for quantum computation.
id: hardware
providers:
- codeExamples:
  - fullCode: |-
      from qiskit_aqt_provider import AQTProvider
      provider = AQTProvider('ACCESS_TOKEN')
      backend = provider.get_backend('offline_simulator_no_noise')

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: AQT provides access to Calcium trapped-ion quantum devices.
  docsCta:
    label: Docs
    url: https://qiskit-community.github.io/qiskit-aqt-provider/
  installation: |-
    pip install qiskit-aqt-provider
  sourceCta:
    label: GitHub
    url: https://github.com/qiskit-community/qiskit-aqt-provider/
  title: AQT
  websiteCta:
    label: Website
    url: https://www.aqt.eu/qc-systems/
- codeExamples:
  - fullCode: |-
      from qiskit_ibm_provider import IBMProvider

      # Get the API token in https://quantum-computing.ibm.com/account
      provider = IBMProvider(token="MY_IBM_QUANTUM_TOKEN")
      backend = provider.get_backend("ibm_nairobi")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: IBM Quantum offers both open and premium access to a wide variety of
    quantum systems. All quantum systems deployed by IBM Quantum are based on superconducting
    qubit technology, as the control and scalability of this technology pave a clear
    path to achieving quantum advantage with these systems.
  docsCta:
    label: Docs
    url: https://qiskit.org/documentation/partners/qiskit_ibm_provider/
  installation: |-
    pip install qiskit
    pip install qiskit-ibm-provider
  sourceCta:
    label: GitHub
    url: https://github.com/Qiskit/qiskit-ibm-provider
  title: IBM Quantum
  websiteCta:
    label: Website
    url: https://quantum-computing.ibm.com/services?services=systems
- codeExamples:
  - fullCode: |-
      from qiskit_ionq import IonQProvider
      provider = IonQProvider("MY_IONQ_TOKEN")
      backend = provider.get_backend("ionq_qpu")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: IonQ offers access to Ytterbium trapped-ion quantum computers with
    high gate fidelity, long coherence time and all-to-all connectivity.
  docsCta:
    label: Docs
    url: https://qiskit.org/documentation/partners/ionq/
  installation: |-
    pip install qiskit
    pip install qiskit-ionq
  sourceCta:
    label: GitHub
    url: https://github.com/Qiskit-Partners/qiskit-ionq
  title: IonQ
  websiteCta:
    label: Website
    url: https://ionq.com/
- codeExamples:
  - fullCode: |-
      from qiskit_iqm import IQMProvider
      provider = IQMProvider(iqm_server_url)
      backend = provider.get_backend()

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: IQM offers access to gate-model based superconducting qubits quantum
    systems.
  docsCta:
    label: Docs
    url: https://iqm-finland.github.io/qiskit-on-iqm/
  installation: |-
    pip install qiskit
    pip install qiskit-iqm
  sourceCta:
    label: GitHub
    url: https://github.com/iqm-finland/qiskit-on-iqm
  title: IQM
  websiteCta:
    label: Website
    url: https://www.meetiqm.com/
- codeExamples:
  - fullCode: |-
      from qiskit_quantinuum import Quantinuum
      Quantinuum.save_account("username@company.com")
      backend = Quantinuum.get_backend("deadhead")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: Quantinuum provides access to Ytterbium trapped-ion systems with high-fidelity,
    fully connected qubits, and the ability to perform mid-circuit measurement.
  docsCta:
    label: Docs
    url: https://github.com/qiskit-community/qiskit-quantinuum-provider/blob/master/examples/QuantinuumExample.ipynb
  installation: |-
    pip install qiskit
    pip install qiskit-quantinuum-provider
  sourceCta:
    label: GitHub
    url: https://github.com/qiskit-community/qiskit-quantinuum-provider
  title: Quantinuum
  websiteCta:
    label: Website
    url: https://www.quantinuum.com/
- codeExamples:
  - fullCode: |-
      from qiskit_rigetti import RigettiQCSProvider
      provider = RigettiQCSProvider()
      backend = provider.get_backend("Aspen-11")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: Rigetti offers access to universal, gate-model machines based on tunable
    superconducting qubits.
  docsCta:
    label: Docs
    url: https://qiskit-rigetti.readthedocs.io/en/latest/
  installation: |-
    pip install qiskit
    pip install qiskit-rigetti
  sourceCta:
    label: GitHub
    url: https://github.com/rigetti/qiskit-rigetti
  title: Rigetti
  websiteCta:
    label: Website
    url: https://www.rigetti.com/
title: Quantum Hardware
