description: Cloud services that allow you to simulate quantum programs in high performance
  computers.
id: cloud-simulators
providers:
- codeExamples:
  - fullCode: |-
      from qiskit_ibm_provider import IBMProvider

      # Get the API token in https://quantum-computing.ibm.com/account
      provider = IBMProvider(token="MY_IBM_QUANTUM_TOKEN")
      backend = provider.get_backend("simulator_statevector")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: IBM Quantum features a collection of high-performance simulators for
    prototyping quantum circuits and algorithms, and exploring their performance under
    realistic device noise models.
  docsCta:
    label: Docs
    url: https://qiskit.org/documentation/partners/qiskit_ibm_provider/
  installation: |-
    pip install qiskit
    pip install qiskit-ibm-provider
  sourceCta:
    label: GitHub
    url: https://github.com/Qiskit/qiskit-ibm-provider
  title: IBM Quantum
  websiteCta:
    label: Website
    url: https://quantum-computing.ibm.com/services/resources?tab=simulators
- codeExamples:
  - fullCode: |-
      from qiskit_ionq import IonQProvider
      provider = IonQProvider("MY_IONQ_TOKEN")
      backend = provider.get_backend("ionq_simulator")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: The IonQ Quantum Cloud providers 29-qubit cloud simulator.
  docsCta:
    label: Docs
    url: https://qiskit.org/documentation/partners/ionq/
  installation: |-
    pip install qiskit
    pip install qiskit-ionq
  sourceCta:
    label: GitHub
    url: https://github.com/Qiskit-Partners/qiskit-ionq
  title: IonQ
  websiteCta:
    label: Website
    url: https://ionq.com/resources/the-value-of-classical-quantum-simulators
- codeExamples:
  - fullCode: |-
      from qiskit_rigetti import RigettiQCSProvider
      provider = RigettiQCSProvider()
      backend = provider.get_simulator(num_qubits=5, noisy=True)

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: The Rigetti Quantum Virtual Machine is a wavefunction simulation of
    unitary evolution with classical control flow and shared quantum classical memory.
  docsCta:
    label: Docs
    url: https://qiskit-rigetti.readthedocs.io/en/latest/
  installation: |-
    pip install qiskit
    pip install qiskit-rigetti
  sourceCta:
    label: GitHub
    url: https://github.com/rigetti/qiskit-rigetti
  title: Rigetti Quantum Virtual Machine (QVM)
  websiteCta:
    label: Website
    url: https://www.rigetti.com/applications/qvm
title: Cloud Simulators
