description: Software packages that allow users to simulate quantum programs in your
  local computer.
id: local-simulators
providers:
- codeExamples:
  - fullCode: |-
      from qiskit_aer import AerSimulator
      backend = AerSimulator()

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: Aer is a high performance simulator for quantum circuits that includes
    noise models.
  docsCta:
    label: Docs
    url: https://qiskit.org/ecosystem/aer/
  installation: |-
    pip install qiskit
    pip install qiskit-aer
  sourceCta:
    label: GitHub
    url: https://github.com/Qiskit/qiskit-aer
  title: Aer
- codeExamples:
  - fullCode: |-
      from mqt import ddsim
      provider = ddsim.DDSIMProvider()
      backend = provider.get_backend('qasm_simulator')

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: MQT DDSIM is a quantum circuit simulator based on decision diagrams
    written in C++.
  docsCta:
    label: Docs
    url: https://ddsim.readthedocs.io/en/latest/
  installation: |-
    pip install qiskit
    pip install mqt.ddsim
  sourceCta:
    label: GitHub
    url: https://github.com/cda-tum/ddsim
  title: MQT DDSIM
  websiteCta:
    label: Website
    url: https://www.cda.cit.tum.de/research/quantum_simulation/
- codeExamples:
  - fullCode: |-
      from cusvaer.backends import StatevectorSimulator
      backend = StatevectorSimulator()

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: NVIDIA cuStateVec is a high-performance library dedicated to operations
    with state vectors for expressing quantum algorithms.
  docsCta:
    label: Docs
    url: https://docs.nvidia.com/cuda/cuquantum/custatevec/index.html
  installation: |-
    pip install qiskit
    conda install -c conda-forge custatevec
  sourceCta:
    label: GitHub
    url: https://github.com/NVIDIA/cuQuantum
  title: NVIDIA cuStateVec
  websiteCta:
    label: Website
    url: https://developer.nvidia.com/cuquantum-sdk
- codeExamples:
  - fullCode: |-
      from quac_qiskit import Quac
      backend = Quac.get_backend("fake_vigo_density_simulator")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: QuaC is a parallel time dependent open quantum systems solver.
  docsCta:
    label: Docs
    url: https://github.com/0tt3r/QuaC-qiskit/tree/master/examples/demos
  installation: |-
    pip install qiskit
    git clone https://github.com/0tt3r/QuaC-qiskit
    cd QuaC-qiskit
    pip install .
  sourceCta:
    label: GitHub
    url: https://github.com/0tt3r/QuaC-qiskit
  title: QuaC
  websiteCta:
    label: Website
    url: https://0tt3r.github.io/QuaC/
title: Local Simulators
