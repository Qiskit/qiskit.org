description: Cloud services that allow you to connect with several quantum services
  from different vendors.
id: multi-platforms
providers:
- codeExamples:
  - fullCode: |-
      from qiskit_braket_provider import AWSBraketProvider
      provider = AWSBraketProvider()
      # QuEra Aquila is a 256-qubit quantum processor based on
      # programmable arrays of neutral Rubidium atoms
      backend = provider.backends("Aquila")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: Amazon Braket is a fully managed quantum computing service designed
    to help speed up scientific research and software development for quantum computing.
  docsCta:
    label: Docs
    url: https://qiskit-community.github.io/qiskit-braket-provider/
  installation: |-
    pip install qiskit
    pip install qiskit_braket_provider
  sourceCta:
    label: GitHub
    url: https://github.com/qiskit-community/qiskit-braket-provider
  title: Amazon Braket
  websiteCta:
    label: Website
    url: https://aws.amazon.com/braket/
- codeExamples:
  - fullCode: |-
      from azure.quantum.qiskit import AzureQuantumProvider
      provider = AzureQuantumProvider(resource_id="MY_RESOURCE_ID",location="MY_LOCATION")
      backend = provider.get_backend("quantinuum.qpu.h1-2")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: Azure Quantum is the cloud quantum computing service of Azure, with
    a diverse set of quantum solutions and technologies.
  docsCta:
    label: Docs
    url: https://aka.ms/AQ/Qiskit/QuickStart
  installation: |-
    pip install qiskit
    pip install "azure-quantum[qiskit]"
  sourceCta:
    label: null
    url: null
  title: Azure Quantum
  websiteCta:
    label: Website
    url: https://aka.ms/aq
- codeExamples:
  - fullCode: |-
      from gaqqie_door import QiskitGaqqie
      # rewrite to the endpoint URL of the user API
      url = "https://<api-id>.execute-api.<region>.amazonaws.com/<stage>"
      QiskitGaqqie.enable_account(url)
      backend = QiskitGaqqie.get_backend("qiskit_simulator")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: Gaqqie is an open-source quantum computer cloud platform.
  docsCta:
    label: Docs
    url: https://github.com/gaqqie/gaqqie/blob/main/docs/document.pdf
  installation: |-
    pip install qiskit
    pip install gaqqie-door
  sourceCta:
    label: GitHub
    url: https://github.com/gaqqie/gaqqie
  title: Gaqqie
  websiteCta:
    label: Website
    url: null
- codeExamples:
  - fullCode: |-
      from qiskit_qcware import QcwareProvider
      provider = QcwareProvider()
      backend = provider.get_backend('forge_statevector')

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: QC Ware Forge is an unique and efficient turn-key algorithms for data
    scientists and powerful circuit building blocks for quantum engineers.
  docsCta:
    label: Docs
    url: https://github.com/qcware/qiskit_qcware/blob/master/notebooks/basic_demo.ipynb
  installation: |-
    pip install qiskit
    pip install qiskit-qcware
  sourceCta:
    label: GitHub
    url: https://github.com/qcware/qiskit_qcware
  title: QC Ware Forge
  websiteCta:
    label: Website
    url: https://forge.qcware.com/
- codeExamples:
  - fullCode: |-
      import strangeworks
      from strangeworks_qiskit import StrangeworksProvider
      # get your API key from the Strangeworks Portal
      strangeworks.authenticate(api_key="your-api-key")
      provider = StrangeworksProvider()
      # Xanadu Borealis is a photonic quantum computer with a programmable loop-based
      # interferometer with over 216 squeezed-state qubits
      backend = provider.get_backend("borealis")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: Strangeworks is the ultimate collaboration of hardware, software, education,
    and service providers, working to develop and test quantum and future compute
    technologies.
  docsCta:
    label: Docs
    url: https://strangeworks.github.io/strangeworks-qiskit/
  installation: |-
    pip install qiskit
    pip install strangeworks-qiskit
  sourceCta:
    label: GitHub
    url: null
  title: Strangeworks
  websiteCta:
    label: Website
    url: https://strangeworks.com/
- codeExamples:
  - fullCode: |-
      from qiskit_superstaq import SuperstaQProvider
      provider = SuperstaQProvider("MY_SUPERSTAQ_TOKEN")
      backend = provider.get_backend("aws_sv1_simulator")

      # Build circuit
      from qiskit import QuantumCircuit
      circuit = QuantumCircuit(2, 2)
      circuit.h(0)
      circuit.cx(0,1)
      circuit.measure([0,1], [0,1])

      # Transpile circuit
      from qiskit import transpile
      transpiled_circuit = transpile(circuit, backend)

      # Run the circuit and get result
      job = backend.run(transpiled_circuit)
      counts = job.result().get_counts()
      print(counts)
    name: Transpile and run
    runMethod: backend
  description: SuperstaQ is a hardware-agnostic software platform that connects applications
    to quantum computers from IBM Quantum, IonQ, and Rigetti.
  docsCta:
    label: Docs
    url: null
  installation: |-
    pip install qiskit
    pip install qiskit-superstaq
  sourceCta:
    label: GitHub
    url: https://github.com/Infleqtion/client-superstaq
  title: SuperstaQ
  websiteCta:
    label: Website
    url: https://www.super.tech/about-superstaq/
title: Multi-platforms
