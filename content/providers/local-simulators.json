{
  "id": "local-simulators",
  "title": "Local Simulators",
  "description": "Software packages that allow users to simulate quantum programs in your local computer.",
  "providers": [
    {
      "title": "Aer",
      "description": "Aer is a high performance simulator for quantum circuits that includes noise models.",
      "installation": [
        "pip install qiskit",
        "pip install qiskit-aer"
      ],
      "websiteCta": {
        "label": null,
        "url": null
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://qiskit.org/ecosystem/aer/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/Qiskit/qiskit-aer"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from qiskit_aer import AerSimulator",
            "backend = AerSimulator()",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    },
    {
      "title": "MQT DDSIM",
      "description": "MQT DDSIM is a quantum circuit simulator based on decision diagrams written in C++.",
      "installation": [
        "pip install qiskit",
        "pip install mqt.ddsim"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://www.cda.cit.tum.de/research/quantum_simulation/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://ddsim.readthedocs.io/en/latest/"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/cda-tum/ddsim"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from mqt import ddsim",
            "provider = ddsim.DDSIMProvider()",
            "backend = provider.get_backend('qasm_simulator')",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    },
    {
      "title": "NVIDIA cuStateVec",
      "description": "NVIDIA cuStateVec is a high-performance library dedicated to operations with state vectors for expressing quantum algorithms.",
      "installation": [
        "pip install qiskit",
        "conda install -c conda-forge custatevec"
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://developer.nvidia.com/cuquantum-sdk"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://docs.nvidia.com/cuda/cuquantum/custatevec/index.html"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/NVIDIA/cuQuantum"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from cusvaer.backends import StatevectorSimulator",
            "backend = StatevectorSimulator()",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    },
    {
      "title": "QuaC",
      "description": "QuaC is a parallel time dependent open quantum systems solver.",
      "installation": [
        "pip install qiskit",
        "git clone https://github.com/0tt3r/QuaC-qiskit\ncd QuaC-qiskit\npip install ."
      ],
      "websiteCta": {
        "label": "Website",
        "url": "https://0tt3r.github.io/QuaC/"
      },
      "docsCta": {
        "label": "Docs",
        "url": "https://github.com/0tt3r/QuaC-qiskit/tree/master/examples/demos"
      },
      "sourceCta": {
        "label": "GitHub",
        "url": "https://github.com/0tt3r/QuaC-qiskit"
      },
      "codeExamples": [
        {
          "name": "Transpile and run",
          "runMethod": "backend",
          "fullCode": [
            "from quac_qiskit import Quac",
            "backend = Quac.get_backend(\"fake_vigo_density_simulator\")",
            "&nbsp;",
            "# Build circuit",
            "from qiskit import QuantumCircuit",
            "circuit = QuantumCircuit(2, 2)",
            "circuit.h(0)",
            "circuit.cx(0,1)",
            "circuit.measure([0,1], [0,1])",
            "&nbsp;",
            "# Transpile circuit",
            "from qiskit import transpile",
            "transpiled_circuit = transpile(circuit, backend)",
            "&nbsp;",
            "# Run the circuit and get result",
            "job = backend.run(transpiled_circuit)",
            "counts = job.result().get_counts()",
            "print(counts)"
          ]
        }
      ]
    }
  ]
}